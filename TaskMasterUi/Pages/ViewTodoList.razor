@page "/todolist/{Id:int}"
@inject TaskMasterService taskMaster

<h3>TodoList</h3>
@if (_todoList == null)
{
    <p>Loading</p>
}
else
{
    <h4>@_todoList.Title</h4>
    <ul>
        @foreach (TodoDTO todo in _todoList.Todos)
        {
            int index = todo.Id;
            <li>
                <input type="Checkbox" checked="@todo.Completed" @onchange="(e => CompletedChanged(index))">
                <a href="./todo/@todo.Id?listId=@_todoList.Id">@todo.Title</a>
                @if (_pagestate == Pagestate.None)
                {
                    <button @onclick=@(e => RequestDelete(index))>Delete</button>
                }
            </li>
        }
    </ul>
}
@switch (_pagestate)
{
    case Pagestate.DeleteState:
        <p>Really delete @_todoToDelete.Title?</p>
        <button @onclick="DeleteTodoList">Ok</button>
        <button @onclick="CancelState">Cancel</button>
        break;

    case Pagestate.CreateState:
        <p>Enter information for new Todo:</p>
        <p><EditForm Model="@_todoToCreate">
            Title:<InputText @bind-Value=_todoToCreate.Title Id="Title"></InputText>
            Description:<InputText @bind-Value=_todoToCreate.Description Id="Description"></InputText>
            Priority: <InputSelect @bind-Value=_todoToCreate.Priority>
                @foreach (var p in Enum.GetValues(typeof(TodoPriority)))
                {
                    <option value="@p">@p</option>
                }
             </InputSelect><br>
        </EditForm></p>
        <button @onclick="CreateTodoList">Ok</button>
        <button @onclick="@CancelState">Cancel</button>
        break;

    case Pagestate.ChangeNameState:
        <p>Enter new name for todolist:</p>
        <input type="text" @bind="_editedList.Title"></input>
        <button @onclick="EditListTitle">Save</button>
        <button @onclick="CancelState">Cancel</button>
        break;

    case (_):
    <button @onclick="RequestCreate">New Todo</button>
    <button @onclick="RequestEditTitle">Edit List-name</button>
    break;
}
<p><a href="./todolistoverview">&lt;-</a></p>


@code {
    [Parameter]
    public int Id { get; set; }
    private TodoListDTO _todoList;
    private CreateTodoDTO? _todoToCreate;
    private TodoDTO? _todoToDelete;
    private CreateTodoListDTO _editedList;
    private Pagestate _pagestate = Pagestate.None;

    protected override async Task OnInitializedAsync()
    {
        _todoList = await taskMaster.GetSingleTodoList(Id);
    }

    private async Task NewTodo()
    {
        //FIXME New todo
    }

    private async Task CompletedChanged(int index)
    {
        TodoDTO todo = _todoList.Todos.SingleOrDefault(t => t.Id == index);
        EditTodoDTO editTodo = new EditTodoDTO();
        editTodo.Title = todo.Title;
        editTodo.Description = todo.Description;
        editTodo.Priority = todo.Priority;
        editTodo.Completed = !todo.Completed;
        await taskMaster.EditTodo(todo.Id, editTodo);
    }

    private void RequestDelete(int index)
    {
        _todoToDelete = _todoList.Todos.SingleOrDefault(t => t.Id == index);
        _pagestate = Pagestate.DeleteState;
    }

    private async Task DeleteTodoList()
    {
        await taskMaster.DeleteTodo(_todoToDelete.Id);
        _todoToDelete = null;
        _pagestate = Pagestate.None;
        _todoList = await taskMaster.GetSingleTodoList(Id);
        StateHasChanged();
    }

    private void RequestCreate()
    {
        _todoToCreate = new CreateTodoDTO();
        _pagestate = Pagestate.CreateState;
    }

    private async Task CreateTodoList()
    {
        await taskMaster.CreateTodo(Id, _todoToCreate);
        _todoToCreate = null;
        _pagestate = Pagestate.None;
        _todoList = await taskMaster.GetSingleTodoList(Id);
        StateHasChanged();
    }

    private void RequestEditTitle()
    {
        _editedList = new CreateTodoListDTO();
        _pagestate = Pagestate.ChangeNameState;
    }

    private async Task EditListTitle()
    {
        await taskMaster.EditTodoList(Id, _editedList);
        _editedList = null;
        _pagestate = Pagestate.None;
        _todoList = await taskMaster.GetSingleTodoList(Id);
        StateHasChanged();
    }

    private void CancelState()
    {
        _todoToDelete = null;
        _todoToCreate = null;
        _editedList = null;
        _pagestate = Pagestate.None;
    }

    public enum Pagestate
    {
        None = 0,
        DeleteState = 1,
        CreateState = 2,
        ChangeNameState = 3
    }
}

