@page "/todolist/{Id:int}"
@inject TaskMasterService taskMaster

<h3>TodoList</h3>
@if (_todoList == null)
{
    <p>Loading</p>
}
else
{
    <h4>@_todoList.Title</h4>
    <ul>
        @foreach (TodoDTO todo in _todoList.Todos)
        {
            int index = todo.Id;
            <li>
                <input type="Checkbox" checked="@todo.Completed" @onchange="(e => CompletedChanged(index))">
                <a href="./todo/@todo.Id?listId=@_todoList.Id">@todo.Title</a>
                <button @onclick=@(e => RequestDelete(index))>Delete</button>
            </li>
        }
    </ul>
}
@if (_deleteState)
{
    <p>Really delete @_todoToDelete.Title?</p>
    <button @onclick="DeleteTodoList">Ok</button>
    <button @onclick="CancelState">Cancel</button>
}
else if (_createState)
{
    <p>Enter information for new Todolist:</p>
    <p><EditForm Model="@_todoToCreate">
        Title:<InputText @bind-Value=_todoToCreate.Title Id="Title"></InputText>
        Description:<InputText @bind-Value=_todoToCreate.Description Id="Description"></InputText>
        Priority: <InputSelect @bind-Value=_todoToCreate.Priority>
            @foreach (var p in Enum.GetValues(typeof(TodoPriority)))
            {
                <option value="@p">@p</option>
            }
         </InputSelect><br>
    </EditForm></p>
    <button @onclick="CreateTodoList">Ok</button>
    <button @onclick="@CancelState">Cancel</button>
}
else
{
    <button @onclick="RequestCreate">New Todo</button>
}
<p><a href="./todolistoverview">&lt;-</a></p>


@code {
    [Parameter]
    public int Id { get; set; }
    private TodoListDTO _todoList;
    private CreateTodoDTO? _todoToCreate;
    private TodoDTO? _todoToDelete;
    private bool _deleteState = false;
    private bool _createState = false;

    protected override async Task OnInitializedAsync()
    {
        _todoList = await taskMaster.GetSingleTodoList(Id);
    }

    private async Task NewTodo()
    {
        //FIXME New todo
    }

    private async Task CompletedChanged(int index)
    {
        TodoDTO todo = _todoList.Todos.SingleOrDefault(t => t.Id == index);
        EditTodoDTO editTodo = new EditTodoDTO();
        editTodo.Title = todo.Title;
        editTodo.Description = todo.Description;
        editTodo.Priority = todo.Priority;
        editTodo.Completed = !todo.Completed;
        await taskMaster.EditTodo(todo.Id, editTodo);
    }

        private void RequestDelete(int index)
    {
        _todoToDelete = _todoList.Todos.SingleOrDefault(t => t.Id == index);
        _deleteState = true;
    }

    private async Task DeleteTodoList()
    {
        await taskMaster.DeleteTodo(_todoToDelete.Id);
        _todoToDelete = null;
        _deleteState = false;
        _todoList = await taskMaster.GetSingleTodoList(Id);
        StateHasChanged();
    }

    private void RequestCreate()
    {
        _todoToCreate = new CreateTodoDTO();
        _createState = true;
    }

    private async Task CreateTodoList()
    {
        await taskMaster.CreateTodo(Id, _todoToCreate);
        _todoToCreate = null;
        _createState = false;
        _todoList = await taskMaster.GetSingleTodoList(Id);
        StateHasChanged();
    }

    private void CancelState()
    {
        _todoToDelete = null;
        _todoToCreate = null;
        _deleteState = _createState = false;
    }
}

